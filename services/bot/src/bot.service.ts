import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { Telegraf, Context } from 'telegraf';
import { RedisService } from './redis.service';
import axios from 'axios';

@Injectable()
export class BotService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(BotService.name);
  private bot: Telegraf<Context>;
  private readonly apiBaseUrl = process.env.API_BASE_URL || 'http://api:3000';

  constructor(private readonly redisService: RedisService) {}

  async onModuleInit() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      this.logger.error('TELEGRAM_BOT_TOKEN is not set');
      return;
    }

    this.bot = new Telegraf(token);
    this.setupCommands();
    this.setupErrorHandling();

    try {
      await this.setWebhook();
      this.logger.log('‚úÖ Bot service initialized successfully');
    } catch (error) {
      this.logger.error('Failed to initialize bot:', error);
    }
  }

  async onModuleDestroy() {
    if (this.bot) {
      await this.bot.stop('SIGINT');
    }
  }

  private setupCommands() {
    // Start command
    this.bot.start(async (ctx) => {
      const userId = ctx.from.id;
      const username = ctx.from.username || ctx.from.first_name || 'User';
      
      this.logger.log(`User ${username} (${userId}) started the bot`);
      
      // Check if we're in development mode (HTTP URL)
      const webappUrl = process.env.WEBAPP_URL || 'http://localhost:3003';
      const isDevelopment = webappUrl.startsWith('http://');
      
      if (isDevelopment) {
        // Development mode - send simple message with link
        await ctx.reply(
          `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Clicker Mini App, ${username}!\n\n` +
          `–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n` +
          `${webappUrl}\n\n` +
          `–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /leaderboard –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.`,
          {
            reply_markup: {
              inline_keyboard: [[
                {
                  text: 'üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤',
                  callback_data: 'show_leaderboard'
                }
              ]]
            }
          }
        );
      } else {
        // Production mode - use Web App
        await ctx.reply(
          `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Clicker Mini App, ${username}!\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å:`,
          {
            reply_markup: {
              inline_keyboard: [[
                {
                  text: 'üéØ –ò–≥—Ä–∞—Ç—å',
                  web_app: {
                    url: `${webappUrl}/game`
                  }
                }
              ]]
            }
          }
        );
      }
    });

    // Help command
    this.bot.help(async (ctx) => {
      await ctx.reply(
        `üéÆ <b>Clicker Mini App - –ü–æ–º–æ—â—å</b>\n\n` +
        `üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
        `/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n` +
        `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
        `/leaderboard - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n` +
        `/changename - –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n` +
        `üéØ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n` +
        `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å" —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É\n` +
        `‚Ä¢ –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤\n` +
        `‚Ä¢ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!\n\n` +
        `üí° <b>–°–æ–≤–µ—Ç:</b> –ß–µ–º –±–æ–ª—å—à–µ –∫–ª–∏–∫–æ–≤, —Ç–µ–º –≤—ã—à–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!`,
        { parse_mode: 'HTML' }
      );
    });

    // Change name command
    this.bot.command('changename', async (ctx) => {
      const userId = ctx.from.id;
      const currentUsername = ctx.from.username || ctx.from.first_name || 'User';
      
      await ctx.reply(
        `üë§ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n` +
        `–¢–µ–∫—É—â–µ–µ –∏–º—è: <b>${currentUsername}</b>\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ):`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[
              {
                text: 'üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∏–º—è',
                callback_data: 'change_username'
              }
            ]]
          }
        }
      );
    });

    // Leaderboard command
    this.bot.command('leaderboard', async (ctx) => {
      try {
        const response = await axios.get(`${this.apiBaseUrl}/leaderboard?limit=10`);
        const leaderboard = response.data;

        if (!leaderboard.entries || leaderboard.entries.length === 0) {
          await ctx.reply('üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!');
          return;
        }

        let message = 'üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n';
        
        leaderboard.entries.forEach((entry: any, index: number) => {
          const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
          message += `${medal} <b>${index + 1}.</b> ${entry.username}: <b>${entry.clicks}</b> –∫–ª–∏–∫–æ–≤\n`;
        });

        message += `\nüéØ <b>–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤:</b> ${leaderboard.globalClicks || 0}`;

        // Check if we're in development mode (HTTP URL)
        const webappUrl = process.env.WEBAPP_URL || 'http://localhost:3003';
        const isDevelopment = webappUrl.startsWith('http://');
        
        const keyboard: any[] = [[
          {
            text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            callback_data: 'refresh_leaderboard'
          }
        ]];
        
        if (!isDevelopment) {
          keyboard[0].push({
            text: 'üéÆ –ò–≥—Ä–∞—Ç—å',
            web_app: {
              url: `${webappUrl}/game`
            }
          });
        }

        await ctx.reply(message, { 
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: keyboard
          }
        });
      } catch (error) {
        this.logger.error('Failed to get leaderboard:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // Text message handler for username changes
    this.bot.on('text', async (ctx) => {
      const message = ctx.message.text;
      const userId = ctx.from.id;
      
      // Check if this is a username change (simple heuristic: not a command and not too long)
      if (!message.startsWith('/') && message.length <= 50 && message.length >= 2) {
        // This could be a username change - let's ask for confirmation
        await ctx.reply(
          `üë§ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏</b>\n\n` +
          `–ù–æ–≤–æ–µ –∏–º—è: <b>${message}</b>\n\n` +
          `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?`,
          {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å',
                    callback_data: `confirm_username:${message}`
                  },
                  {
                    text: '‚ùå –û—Ç–º–µ–Ω–∞',
                    callback_data: 'cancel_username'
                  }
                ]
              ]
            }
          }
        );
      }
    });

    // Callback query handler
    this.bot.on('callback_query', async (ctx) => {
      const callbackData = (ctx.callbackQuery as any).data;
      
      if (callbackData === 'change_username') {
        await ctx.answerCbQuery('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        await ctx.reply(
          `üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n` +
          `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ò–≥—Ä–æ–∫123"`,
          { parse_mode: 'HTML' }
        );
      } else if (callbackData === 'show_leaderboard') {
        await ctx.answerCbQuery('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤...');
        // Trigger leaderboard command
        try {
          const response = await axios.get(`${this.apiBaseUrl}/leaderboard?limit=10`);
          const leaderboard = response.data;

          if (!leaderboard.entries || leaderboard.entries.length === 0) {
            await ctx.editMessageText('üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!');
            return;
          }

          let message = 'üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n';
          
          leaderboard.entries.forEach((entry: any, index: number) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
            message += `${medal} <b>${index + 1}.</b> ${entry.username}: <b>${entry.clicks}</b> –∫–ª–∏–∫–æ–≤\n`;
          });

          message += `\nüéØ <b>–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤:</b> ${leaderboard.globalClicks || 0}`;

          await ctx.editMessageText(message, { 
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [[
                {
                  text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
                  callback_data: 'refresh_leaderboard'
                }
              ]]
            }
          });
        } catch (error) {
          this.logger.error('Failed to get leaderboard:', error);
          await ctx.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      } else if (callbackData === 'refresh_leaderboard') {
        await ctx.answerCbQuery('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º...');
        // Re-run leaderboard command
        await this.bot.telegram.sendMessage(
          ctx.chat.id,
          'üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤...'
        );
        // This would trigger the leaderboard command again
      } else if (callbackData.startsWith('confirm_username:')) {
        const newUsername = callbackData.split(':')[1];
        const userId = ctx.from.id;
        
        await ctx.answerCbQuery('‚úÖ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!');
        
        try {
          // Here we would update the username in the database
          // For now, we'll just confirm the change
          await ctx.editMessageText(
            `‚úÖ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n` +
            `–ù–æ–≤–æ–µ –∏–º—è: <b>${newUsername}</b>\n\n` +
            `–ò–º—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.`,
            { 
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [[
                  {
                    text: 'üèÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤',
                    callback_data: 'show_leaderboard'
                  }
                ]]
              }
            }
          );
        } catch (error) {
          this.logger.error('Failed to update username:', error);
          await ctx.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      } else if (callbackData === 'cancel_username') {
        await ctx.answerCbQuery('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
        await ctx.editMessageText('‚ùå –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      }
    });
  }

  private setupErrorHandling() {
    this.bot.catch((err, ctx) => {
      this.logger.error('Bot error:', err);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
  }

  private async setWebhook() {
    const webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
    if (!webhookUrl) {
      this.logger.warn('TELEGRAM_WEBHOOK_URL is not set, using polling mode');
      this.startPolling();
      return;
    }

    // Check if URL is HTTPS for production webhook
    if (!webhookUrl.startsWith('https://')) {
      this.logger.warn('Webhook URL is not HTTPS, using polling mode for local development');
      this.startPolling();
      return;
    }

    try {
      await this.bot.telegram.setWebhook(`${webhookUrl}/webhook`);
      this.logger.log(`‚úÖ Webhook set to: ${webhookUrl}/webhook`);
    } catch (error) {
      this.logger.error('Failed to set webhook, falling back to polling:', error);
      this.startPolling();
    }
  }

  private startPolling() {
    this.logger.log('üîÑ Starting polling mode...');
    this.bot.launch();
    this.logger.log('‚úÖ Bot polling started successfully');
  }

  // Method to handle webhook updates
  async handleUpdate(update: any) {
    try {
      await this.bot.handleUpdate(update);
    } catch (error) {
      this.logger.error('Failed to handle update:', error);
      throw error;
    }
  }

  // Method to get bot info
  async getBotInfo() {
    try {
      return await this.bot.telegram.getMe();
    } catch (error) {
      this.logger.error('Failed to get bot info:', error);
      return null;
    }
  }
}
